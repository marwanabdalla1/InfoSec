{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/marwanabdalla1/InfoSec/blob/main/(Unedited)%20Stream_Ciphers_.ipynb%20\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ZlmgIqTJ6l3F"
      },
      "source": [
        "# Table of contents:\n",
        "\n",
        "* [Stream Ciphers](#streamciphers)\n",
        "* [ChaCha20 Stream Cipher](#chacha20)\n",
        "* [Length of ciphertext in stream cipher](#len)\n",
        "\n",
        "\n",
        "Author: [Sebasti√† Agramunt Puig](https://github.com/sebastiaagramunt) for [OpenMined](https://www.openmined.org/) Privacy ML Series course."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "RWI79Te76l3G"
      },
      "source": [
        "# Stream ciphers <a class=\"anchor\" id=\"streamciphers\"></a>\n",
        "\n",
        "So far, the cipher we coded pads bit by bit or, equivalently byte by byte, this is what we know as **stream cipher** because we generate a stream of bytes to pad the message. Of course our homemade implementation is not the perfect one. Hopefully we have the ```cryptography``` package!.\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "3If_PE4-6l3H"
      },
      "source": [
        "<img src=\"img/stream_cipher.png\" style=\"width:900px\"/>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "txfmULls6l3H"
      },
      "source": [
        "# The ChaCha20 Stream Cipher <a class=\"anchor\" id=\"chacha20\"></a>\n",
        "\n",
        "The ciphertext has the same lenght as the plaintext, if we add one more bit to the plaintext that would result in one more bit in the plaintext. Let's use a stream cipher called [ChaCha20](https://tools.ietf.org/html/draft-strombergson-chacha-test-vectors-00), you can find a python [implementation](https://asecuritysite.com/encryption/chacha) and the original [paper](https://cr.yp.to/chacha/chacha-20080120.pdf)."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "s1bc1EJX6l3H"
      },
      "outputs": [],
      "source": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "kWUB_jSo6l3I"
      },
      "source": [
        "# Length of the ciphertext in stream ciphers <a class=\"anchor\" id=\"len\"></a>\n",
        "\n",
        "The lenght of the ciphertext is the same as the lenght of the plaintext in stream ciphers. In the next example we create a message of all characters \"a\" and encrypt with ChaCha20 cipher:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "HWipfZ0a6l3I"
      },
      "outputs": [],
      "source": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "MowCyxyD6l3I"
      },
      "source": [
        "Since in stream ciphers (in general) we are XORing byte by byte using the original message and a pseudorandomly generated stream of bytes, the length of the message is the same as the length of the ciphertext."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "YNertuBZ6l3I"
      },
      "outputs": [],
      "source": []
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "DOaPSDiB6l3J"
      },
      "outputs": [],
      "source": []
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "6_QFMaju6l3J"
      },
      "outputs": [],
      "source": []
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "hUKPmtq96l3J"
      },
      "outputs": [],
      "source": []
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3 (ipykernel)",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.9.13"
    },
    "colab": {
      "provenance": [],
      "include_colab_link": true
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}